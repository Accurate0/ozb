name: deploy
on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  build:
    permissions:
      packages: write

    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/cache@v4
        with:
          path: app-target
          key: ${{ runner.os }}-app-target-${{ hashFiles('**/Cargo.lock') }}-ozb-bot

      - name: inject /app/target into docker
        uses: reproducible-containers/buildkit-cache-dance@v2.1.4
        with:
          cache-source: app-target
          cache-target: /app/ozb-bot-build/target/

      - uses: actions/cache@v4
        with:
          path: cargo-registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}-ozb-bot

      - name: inject /usr/local/cargo/registry/ into docker
        uses: reproducible-containers/buildkit-cache-dance@v2.1.4
        with:
          cache-source: cargo-registry
          cache-target: /usr/local/cargo/registry/

      - name: Docker build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/accurate0/ozb-bot:latest,ghcr.io/accurate0/replybot:${{ github.sha }}
          build-args: |
            BINARY_NAME=bot
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      # This ugly bit is necessary if you don't want your cache to grow forever
      # till it hits GitHub's limit of 5GB.
      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
          version: 1.76.6

      - name: Deploy to k8s
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          if [ ! -d "$HOME/.kube" ]; then
            mkdir -p $HOME/.kube
          fi

          echo -n "$KUBE_CONFIG" | base64 -di > $HOME/.kube/config
          kubectl apply -f application.yaml

  build-lambda:
    runs-on: ubuntu-latest
    steps:
      - name: install musl gcc
        run: sudo apt install musl-tools

      - uses: actions/checkout@v3
      - uses: Accurate0/rust-toolchain@main
        with:
          profile: minimal
          toolchain: stable
          target: x86_64-unknown-linux-musl

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: generate prisma client
        run: cargo run --locked --profile release-strip --target x86_64-unknown-linux-musl --bin prisma -- generate

      - name: cargo build
        run: cargo build --locked --profile release-strip --target x86_64-unknown-linux-musl --features="prisma" --bin trigger --bin timed --bin daemon

      - name: copy artifacts
        run: |
          mkdir ./ozb
          cp ./target/x86_64-unknown-linux-musl/release-strip/trigger ./ozb/Trigger
          cp ./target/x86_64-unknown-linux-musl/release-strip/timed ./ozb/Timed
          cp ./target/x86_64-unknown-linux-musl/release-strip/daemon ./ozb/Daemon

      - name: upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ozb
          path: ./ozb

  deploy-lambda:
    permissions:
      id-token: write
    needs: [build-lambda]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        task:
          - Trigger
          - Timed
          - Daemon

    steps:
      - name: configure oicd aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - uses: actions/download-artifact@v3
        with:
          name: ozb

      - name: create zip
        run: |
          mv ./${{ matrix.task }} ./bootstrap
          zip -r bootstrap.zip ./bootstrap

      - name: deploy ${{ matrix.task }}
        run: aws lambda update-function-code --function-name Ozb-${{ matrix.task }} --zip-file fileb://bootstrap.zip --region ${{ vars.AWS_REGION }}
