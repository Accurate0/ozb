name: deploy
on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  build-container:
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: configure oicd aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          registry: ${{ vars.AWS_ECR_REGISTRY }}

      - uses: docker/build-push-action@v4
        with:
          push: true
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ vars.AWS_ECR_REGISTRY }}

  deploy-ecs:
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    needs: [build-container, build-lambda]
    steps:
      - name: configure oicd aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: deploy container
        run: aws ecs update-service --region ${{ vars.AWS_REGION }} --cluster default-cluster --service ozb-service --force-new-deployment 2>&1 1>/dev/null

  build-lambda:
    runs-on: ubuntu-latest
    steps:
      - name: install musl gcc
        run: sudo apt install musl-tools

      - uses: actions/checkout@v3
      - name: rust-toolchain
        uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: stable
          target: x86_64-unknown-linux-musl

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-v2

      - name: generate prisma client
        run: cargo run --locked --profile release-strip --target x86_64-unknown-linux-musl --bin prisma -- generate

      - name: cargo build
        run: cargo build --locked --profile release-strip --target x86_64-unknown-linux-musl --features="prisma" --bin trigger --bin timed --bin daemon

      - name: copy artifacts
        run: |
          mkdir ./ozb
          cp ./target/x86_64-unknown-linux-musl/release-strip/trigger ./ozb/Trigger
          cp ./target/x86_64-unknown-linux-musl/release-strip/timed ./ozb/Timed
          cp ./target/x86_64-unknown-linux-musl/release-strip/daemon ./ozb/Daemon

      - name: upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ozb
          path: ./ozb

  deploy-lambda:
    permissions:
      id-token: write
    needs: [build-lambda, build-container]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        task:
          - Trigger
          - Timed
          - Daemon

    steps:
      - name: configure oicd aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - uses: actions/download-artifact@v3
        with:
          name: ozb

      - name: create zip
        run: |
          mv ./${{ matrix.task }} ./bootstrap
          zip -r bootstrap.zip ./bootstrap

      - name: deploy ${{ matrix.task }}
        run: aws lambda update-function-code --function-name Ozb-${{ matrix.task }} --zip-file fileb://bootstrap.zip --region ${{ vars.AWS_REGION }}
